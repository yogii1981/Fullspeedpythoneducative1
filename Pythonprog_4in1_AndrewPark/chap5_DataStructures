# tuple consist of number of values separated by commas. Tuples
# are enclosed in parantheses, while the list are enclosed in brackets

m = (14, 34, 56)
print(m)
print(m[0])
print(m[0:2])

# Tuples also have property like indexing and slicing
i = 1
j = 2
t1 = i, j  # tuple consists of elements i and j

t2 = (3, 4, 5)
t3 = 0, t1, t2
print(t3)

# Lists

# List consists of hetrogeneous values separated by commas enclosed [and] and start from index 0
# Unlike Tuples, lists are mutable and they can be changed  by removing or reassigning the exisiting vakues

a1 = [1, 2, 3, 4, 5]
print(a1)

print(a1[0])
print(a1[0:4])

a1[3] = 20
print(a1[0:4])

# list can be nested
# list can be used as stack or a queue

b1 = [1, 2, 3, 4, 5]
print(b1[2])

b1[2] = 14  # replace 3 element in the list of b1 list
print(b1)

print(len(b1))

print(b1[-1])  # print the extreme last element
print(b1[-2])  # print the extreme last but one element before

b1.append(17)  # add a element to the list
print(b1)

# pop - last in first out
# del - first in first out

b1.pop()
print(b1)  # last element adeed was 17

del (b1[0])
print(b1)  # deleted the first element

# sets - doesn't have duplicate elements

c1 = [1, 3, 4, 5, 6, 2, 3, 5, 6, 7, 9]
uniquenum1 = set(c1)
print(uniquenum1)

print(7 in uniquenum1)
print(12 in uniquenum1)

# Dictionary - data structures indexed by keys
# key and values are separated by ":"

capitals = {'AP': 'Hydrebad', 'MH': 'Mumbai', 'DEL': 'New Delhi'}
print(capitals)
print(capitals['AP'])
capitals['TN'] = 'Chennai'
print(capitals)

# Control Flow Statements

# IF else statements

e = 6
f = 7
if e > f:
    print("e is greater than f")
else:
    print("f is greater than e")


def numberProperty1(input):
    if input % 2 == 0:
        print(input, ' is an even number')
    else:
        print(input, ' is a odd number')


numberProperty1(10)
numberProperty1(11)


##Nested IF ##

def numberProperty2(input):
    if input < 0:
        print(input, ' is a negative number')
    elif input == 0:
        print(input, 'is Zero')
    else:
        print(input, 'is positive')


numberProperty2(7)
numberProperty2(-1)

# While loop#
a = 1
while (a < 10):
    print('The number is: ', a)
    a = a + 2


def printseries(start, end, interval):
    print("\n")
    temp = start
    while (temp < end):
        print(temp),
        temp += interval


printseries(1, 21, 2)

# creates sum with the value 0
# sum = 0
#
# #loop 10 times
# for i in range(1,11):
#     #Gets the user's number
#     nextNumber = int(input("Enter number #"+ str(i) + ":"))
#     #Add the inputted number to the sum
#     sum += nextNumber
# #peint the sum over 10
# print(sum/10)


my_string_1 = "Hello!"
my_string_2 = "My name is David."
my_string_3 = "Welcome to CS1301!"
print(my_string_1)
print(my_string_3)
print(my_string_2)

# from datetime import date
# my_var_1 = True
# my_var_2 = date.today()
# my_var_3 = my_var_2.day
# my_var_4 = 0.5
# print(type(my_var_1))
# print(type(my_var_2))
# print(type(my_var_3))
# print(type(my_var_4))


# my_var_1 = 5
# my_var_1 = 3
# my_var_2 = my_var_1
# my_var_3 = "Hello!"
# my_var_1 = my_var_3
# my_var_3 = 5.2
# my_var_2 = True
# print(type(my_var_1))
# print(type(my_var_2))
# print(type(my_var_3))


my_var_1 = 5
my_var_2 = 7
temp = my_var_1
my_var_1 = my_var_2
my_var_2 = temp
print(my_var_2)

string1 = "Hello!"
print(string1)
string2 = "Welcome to CS1301!"
# "My name is David." = string3
# print(string3)
# print(string4)


my_integer = 3
my_float = 5.5
my_string = "Hello!"
my_boolean = False
a = my_boolean + my_integer
b = my_integer * my_string
c = my_float * my_boolean
d = my_float * my_integer
print(a)
print(b)
print(c)
print(d)

letter_of_the_day = "F"
print("Letter of the day: " + letter_of_the_day)

my_string_1 = "2"
my_string_2 = "-9.1"
my_string_3 = "Hello!"
print(int(my_string_1))
print(bool(my_string_2))
# print(float(my_string_3))
# print(int(my_string_2))
print(float(my_string_1))

# user_input = input("Enter a number: ")
# print("Your original input: " + user_input)
# user_input_as_float = float(user_input)
# print("Your input as a float:", user_input_as_float)
# user_input_as_int = int(user_input)
# print("Your input as an integer:", user_input_as_int)


# num_pancakes = int(input("Enter the number:"))
# print("The most pancakes Bob has eaten at one time is",num_pancakes)
#
# try:
#     num_pancakes = int(input("Enter the number:"))
# except EOFError:
#     print ("Error: No input or End Of File is reached!")
# data = ""
# print data


# total = str("2.51")
#
# #You may modify the lines of code above, but don't move them!
# #When you Submit your code, we'll change these lines to
# #assign different values to the variables.
#
# #The code below attempts to print the message:
# #
# #Thank you for coming to Junior's. Your total is $2.51.
# #
# #Right now, however, the code is broken because the variable
# #total must be converted to a string before printing.
# #
# #Fix the code below! You may fix it however you want.
#
# print("Thank you for coming to Junior's. Your total is $" + total + ".")
# print(type(total))


name = "Elphaba"
verb = "flew"
where = "the western sky"
number = str("5")
result = str("True")

# You may modify the lines of code above, but don't move them!
# When you Submit your code, we'll change these lines to
# assign different values to the variables.

# Above we have created five variables: name, verb, and where
# which are strings, number which is an integer, and result,
# which is a boolean.
#
# Below, write some code that will take these variables and
# print out the sentence below with the values of the variables
# filling in the corresponding spots in the sentence as
# indicated by the variable name in brackets.

# My name is [name] and it is [result] that I [verb] across [where] [number] times.
#
# Make sure to watch out for the data types of the values of
# each of these variables, and make sure you have the right
# number of spaces between each part!
#
#
# Add your code below:

print('My name is {0} and it is {1} that I {2} across {3} {4} times.'.format(name, result, verb, where, number))

# In the code below, we've created two dates. The day in each
# date is chosen randomly. You don't need to worry about how
# this works; all you need to know is that when you start
# writing your code, you'll have access to two variables, each
# holding a date: earlier_date and later_date, and later_date
# is guaranteed to be later than earlier_date.
#
# Complete this code so that it creates a variable called
# days_between that stores the number of days between the two
# dates.
#
# Hint: You can find the number of days between two dates by
# subtracting the day number of the earlier date from the
# day number of the later date.

from datetime import date
import random

earlier_date = date(2017, 6, random.randint(1, 25))
later_date = date(2017, 6, random.randint(earlier_date.day + 1, 28))

# Do not modify the code above!


# Write your code here!

delta = (later_date - earlier_date)
days_between = (delta.days)
# If your code is working correctly, then the following line
# of code will print the correct number of dayes between the
# two dates. Notice that this line uses commas instead of plus
# signs, which is why it doesn't have to convert the dates to
# strings: Python does that implicitly when we use this syntax.
print("There are", days_between, "days between", earlier_date, "and", later_date)

# a = 7
# b = 2
# c = 6
# d = 6
# e = 4
# print(a == b)
# print(c == d)
# print(e == e)
# print(6 == c)
#
# print(not (not True or not False))
# print(True or  False)
# print(not (not(True and True) or False))

# can_fly = True
# is_blue = False
# has_tail = False
# can_see = True
#
# print(can_fly and can_see)
# print(can_fly or has_tail and can_see)
# print(has_tail or is_blue)
# print(can_see and can_fly and is_blue)
# print(has_tail)
#
#
# print(35 > "Hello")

mystery_string_1 = str("rice")
mystery_string_2 = str("Rice")

# You may modify the lines of code above, but don't move them!
# When you Submit your code, we'll change these lines to
# assign different values to the variables.

# Remember, greater than and less than operators can be used to
# compare strings. A string is "less than" another string if it
# comes earlier when sorted alphabetically.
#
# This can have some nuances, though, when it comes to
# capitalization, punctuation, and spaces.
#
# Write some code below that will print True if mystery_string_1
# comes before mystery_string_2 alphabetically according to
# Python, and False if it does not.
#
# While this might be a simple line of code, we'd strongly
# recommend checking out the submission results to see some of
# the odd ways that Python performs. For example, don't be
# surprised when your code says that it's True that "Grapes"
# comes before "apples" alphabetically: Python puts all
# upper-case letters before all lower-case letters.


# Write your code here!

if len(mystery_string_1) == len(mystery_string_2) and (mystery_string_1) < (mystery_string_2):
    print("True")
else:
    print("False")

balance = 20.0
price = 19.0

# You may modify the lines of code above, but don't move them!
# When you Submit your code, we'll change these lines to
# assign different values to the variables.

# Imagine we're writing some software for a cash register or
# credit card processor. We want to approve a purchase if the
# customer's balance is greater than or equal to the purchase
# price, and reject it otherwise.
#
# Write some code below that will print True if balance is
# greater than or equal to price, and False if it is not.


# Add your code here!
print(balance >= price)

balance = 20.0
price = 19.0
overdraft_protection = True

# You may modify the lines of code above, but don't move them!
# When you Submit your code, we'll change these lines to
# assign different values to the variables.

# Last exercise, we printed True if balance was greater than or
# equal to price, and False otherwise. However, some banks have
# something called overdraft protection. Overdraft protection
# means that the customer is allowed to spend more than their
# balance, and the bank just expects them to deposit the money
# to cover the purchase later.
#
# Write some code below that will print True if the customer
# can make the purchase given their balance, the purchase
# price, and whether or not they have overdraft protection.
# Specifically, the result should be True if balance is greater
# than or equal to price or if overdraft_protection is True,
# and False if neither of these are true.


# Add your code here!
print((balance >= price) or (overdraft_protection))

my_string = "0123456789"
print(my_string[-2: -6: -2])

my_gpa = 3.6
my_major = "Computer Science"
my_interest = "Software"
company_gpa_req = 3.5
company_major_recruiting = "Computer Science"
company_interest = "Software"

# You may modify the lines of code above, but don't move them!
# When you Submit your code, we'll change these lines to
# assign different values to the variables.

# It's career fair season and you are in the middle of applying
# to all of these different companies for a potential internship
# next summer, but you plan on only applying to companies that
# you are interested in and companies whose requirements you meet.
#
# You'll only apply to the company if your GPA either matches or
# is greater than the company's required GPA. Even then you'll
# only apply to them if the major they are recruiting is your
# major. However if you are not the major they are recruiting,
# you'll still apply to them if your interest matches the interest
# the company is advertising.
#
# Write some lines of code using logical operators that will print
# True if you do end up applying to the company or False if you
# don't end up appplying to the company based on the requirements
# described above. Use the variable names as listed in the top of
# the problem description.
#
# If your code is working correctly, with the original values of
# the variables defined above, your code should print out True.

# Add your code below!
# if student gpa greater than or equal to company_gpa_req
# gpa && (interest || major)
print(my_gpa >= company_gpa_req and (my_major == company_major_recruiting or my_interest == company_interest))

test_percent = 20
review_time = 2
feel_prepared = True

# You may modify the lines of code above, but don't move them!
# When you Submit your code, we'll change these lines to
# assign different values to the variables.

# You've been studying for your test for a few hours and you're
# trying to decide if you can go to bed or if you need to study
# longer.
#
# To go to bed, you need to feel prepared. Even if you "feel"
# prepared, you need to make sure you have prepared adequately:
# that means reviewing for at least 2 hours (review_time), or
# at least 4 hours if the test is worth 20 percent or more of
# your grade.
#
# So, to go to bed, you must feel prepared (feel_prepared must
# be True), and you must have reviewed for 2 or more hours
# (review_time must be greater than or requal to 2). If the
# test is worth 20% or more (test_percent is greater than
# or equal to 20), you should have reviewed for 4 or more hours
# (review_time greater than or equal to 4).
#
# Add your code below! It should print True if you can go to
# bed, False if you cannot.
if feel_prepared:  # if you feel prepared check for test percentage and review time
    if test_percent < 20 and review_time >= 2:
        print(True)

    elif test_percent >= 20 and review_time >= 4:
        print(True)

    else:
        print(False)

else:  # if do not feel prepared print False
    print(False)

cold = False
windy = False

# You may modify the lines of code above, but don't move them!
# When you Submit your code, we'll change these lines to
# assign different values to the variables.

# In this problem, we want to print the message, "You should
# wear a jacket today!" if it's cold or windy, or the message
# "You don't need a jacket today!" if it's not.
#
# At the bottom of this file, we've added some code that
# handles printing these two messages. For this code to work,
# the variable need_jacket needs to exist. Its value should be
# True (the boolean, not the string) if it's cold or windy,
# False if it's neither cold nor windy.


# Add your code to create the variable need_jacket with the
# appropriate value here!


# Do not modify the code below. It will work if you have
# correctly create the variable need_jacket with the
# appropriate value.

need_jacket = cold or windy

if need_jacket:
    print("You should wear a jacket today!")
else:
    print("You don't need a jacket today!")

can_afford = True
destination_is_safe = True
educational_value = True
relatives_nearby = True
is_international = True
have_passport = True
afraid_to_fly = True
have_a_car = True
is_a_beach = True
is_warm = False
has_skiing = True
is_a_city = True
is_off_peak = True
has_attraction = False

# You may modify the lines of code above, but don't move them!
# When you Submit your code, we'll change these lines to
# assign different values to the variables.

# Imagine for a moment that you're a college student who wants
# to travel during spring break. You have a destination in
# mind. What determines whether you can go there?
#
# First, how would you pay for the trip? If you can afford it
# (can_afford), then all you need is for your parents to agree
# to let you go. Your parents will agree to let you go if the
# destination is safe (destination_is_safe).
#
# If you can't afford it, then you need your parents to pay for
# the trip. Your parents will pay for the trip if the destination
# is safe (destination_is_safe) and if either there is educational
# value (educational_value) or there are relatives nearby for
# you to visit (relatives_nearby).
#
# Second, are you sure you're able to go to this location? If
# it's international (is_international), then you'll need a
# passport (have_passport) and you can't be afraid to fly
# (afraid_to_fly). If it's not international (is_international),
# then you either must have a car (have_a_car) or you can't be
# afraid to fly (afraid_to_fly).
#
# Third, do you actually want to go to this location? If it's a
# beach location (is_a_beach), then you want the weather to be
# warm (is_warm). If it's instead a skiing location (has_skiing),
# you don't want it to be warm (is_warm). If it's a tourist city
# (is_a_city), then you either want it to be an off-peak travel
# time (is_off_peak) or you want there to be an attraction in
# town that week (has_attraction).
#
# If it's both a beach and a city, then you'd decide to go if it
# meets the condition for the beach (it's warm) or for a city
# (is an off-peak time or has an attraction). If it's both a
# skiing location and a city, then you'd decide to go if it meets
# either type of location's conditions as well.
#
# Your only goal here is to print True or False: True if the
# destination represented by the variables is an acceptable
# travel location, False if it is not.
#
# HINT: Don't try to do this all in one line. Break it into
# smaller parts.


# Add your code here!

decide_to_go = True

if can_afford == True:  # If I can afford the money , only needs parents permission
    if destination_is_safe == True:  # For getting the permission, check if destination was safe
        decide_to_go = True  # if it is safe print True
    else:
        decide_to_go = False  # Else print False
else:  # I cant afford the money, so need parent to pay for me
    if destination_is_safe == True and (
            educational_value == True or relatives_nearby == True):  # Parents will pay the money
        decide_to_go = True
    else:
        decide_to_go = False

# Second condition
if is_international == True:  # if destination is international then two condition has to met
    if have_passport == True and afraid_to_fly == False:
        decide_to_go = decide_to_go and True
    else:
        decide_to_go = decide_to_go and False
else:  # if it is not international , then check for the below condition
    if have_a_car == True or afraid_to_fly == False:
        decide_to_go = decide_to_go and True
    else:
        decide_to_go = decide_to_go and False

# Third condition
if is_a_beach == True:  # If destination is a beach
    if is_warm == True:
        decide_to_go = decide_to_go and True
    else:
        decide_to_go = decide_to_go and False
elif has_skiing == True:  # or if there is skilling location
    if is_warm == False:
        decide_to_go = decide_to_go and True
    else:
        decide_to_go = decide_to_go and False
if is_a_city == True:  # checking for the conditions of city
    if is_off_peak == True or has_attraction == True:
        decide_to_go = decide_to_go and True
    else:
        decide_to_go = decide_to_go and False
if is_a_beach == True and is_a_city == True:  # checking if it is both a beach and city
    if is_warm == True or is_off_peak == True or has_attraction == True:
        decide_to_go = decide_to_go and True
    else:
        decide_to_go = decide_to_go and False
if has_skiing == True and is_a_city == True:  # checking is it both a city and a skilling location
    if is_warm == False or (
            is_off_peak == True or has_attraction == True):  # then either of that location conditon had to met
        decide_to_go = decide_to_go and True
    else:
        decide_to_go = decide_to_go and False

if decide_to_go == True:  # The final checking if it is possible or not
    print(True)
else:
    print(False)

a = 7
b = 4
c = 2
print(b ** c ** c)
print(a / b // c)

my_var = 1
my_var = my_var + 5
my_var = my_var - 10
my_var = my_var * 3
my_var = my_var / 6
my_var = my_var // 2
my_var = my_var ** 3
print(my_var)

my_var = 2
my_var = my_var + my_var
my_var = my_var - my_var / 2
my_var = my_var ** my_var
my_var = my_var * my_var
print(my_var)

basecapturerate = 0.33
cpmultiplier = 0.75
ball, curve, berry, throw, medal = 1, 1, 1, 1, 1
baserate = (1 - (basecapturerate / (2 * cpmultiplier)))
multipliers = ball * curve * berry * throw * medal
probability = 1 - baserate ** multipliers
print(round(probability, 2))

basecapturerate = 0.33
cpmultiplier = 0.75
ball, curve, berry, throw, medal = 1, 1, 1, 1, 1
baserate = (1 - (basecapturerate / (2 * cpmultiplier)))
multipliers = ball * curve * berry * throw * medal
probability = 1 - baserate ** multipliers
print(round(probability, 2))

a = 6
b = 2
c = 9
print(b ** a * b)

my_var = 20
my_var += my_var
my_var *= my_var
my_var **= my_var
my_var //= my_var
print(my_var)

print("Planet" < "Planets")

print("Spun" < "Spin")

print("Faster" < "Fast as a rocket")

a = 5
a **= 2
b = a % 5
a *= b
b += 5
a -= b
c = a == b
d = a ** 2 == b ** 2
e = c or d
print(a)
print(b)
print(c)
print(d)
print(e)

dividend = 7
divisor = 3

# You may modify the lines of code above, but don't move them!
# When you Submit your code, we'll change these lines to
# assign different values to the variables.

# The variables above create a dividend and a divisor. Add
# some code below that will print the quotient and remainder
# of performing this operation. The quotient should be the
# whole number, not the decimal number: for example, with the
# original values of dividend and divisor (7 and 3), your code
# should print 2, then 1: 3 goes into 7 two whole times, with
# one left over.
#
# Print the quotient and remainder each on their own line.
# Both values should be integers: there should be no decimals.


# Add your code here!
quotient = dividend // divisor
print(quotient)

remainder = dividend / divisor
print(dividend % divisor)

speed_mph = 60

# You may modify the lines of code above, but don't move them!
# When you Submit your code, we'll change these lines to
# assign different values to the variables.
#
# In the United States, speeds are typically given in terms of
# miles per hour. In the rest of the world, speeds are
# typically given in kilometers per hour.
#
# To convert miles per hour to kilometers per hour, we
# multiply miles per hour by 1.6 (technically 1.60934, but
# we're going to round anyway, so the extra decimals won't
# matter).
#
# Write some code that will convert the speed given by
# speed_mph to kilometers per hour, then print the
# following message (substituting in the right values):
#
# 60 miles per hour equals 96 kilometers per hour.
#
# You should drop off any decimals that result from this
# conversion. Note that this is different from rounding:
# if speed_mph was 53, your answer would be 84 kilometers
# per hour, not 84.8 or 85. (Hint: Converting a float to
# an integer automatically rounds down.)


# Add your code here!
speed_kph = int(1.6 * speed_mph)
print('{0} miles per hour equals {1} kilometers per hour.'.format(speed_mph, speed_kph))

A = 50
T = 301
n = 0.5
Ea = 30
R = 0.8268

# You may modify the lines of code above, but don't move them!
# When you Submit your code, we'll change these lines to
# assign different values to the variables.

# The Arrhenius equation is a formula used in physical
# chemsitry to show temperature dependence on reaction rates.
# A modified form of the equation is showed below:
#
# k = A x T^n x e^(-Ea/(R x T))
#
# Where k is a rate constant, T is the temperature in Kelvin,
# n is some constant, A is the pre-exponential factor, Ea is
# the activation energy, R is the universal gas constant, and
# e is the mathematical constant.
#
# It can also be seen here:
# https://wikimedia.org/api/rest_v1/media/math/render/svg/178c4170c8a642485243ccc3e816f7ae4056dd51
#
# Below, write some lines of code that replicates this modified
# Arrhenius equation using the variables created above as the
# different factors in the equation, and print out the resulting
# value of k. For the mathematical constant e, we have imported
# e from the math library so you can simply use e to access this
# value (as if it's a variable defined above as well).
#
# You should round the result to two decimal places. To do this,
# you can use Python's built-in round() function. To use it, use
# the following syntax:
#
# rounded_num = round(original_num, 2)
#
# The syntax on the line above will round original_num to 2
# decimal points and assign the result to rounded_num.

# With the current values of these variables, your code should
# output 768.95.

from math import e

# Write your code here!
k = (A * T ** n * e ** (-Ea / (R * T)))
print(round(k, 2))

s1 = 95
s2 = 40
s3 = 50
s4 = 100
s5 = 87
s6 = 24
s7 = 8
s8 = 76
s9 = 52
s10 = 84

# You may modify the lines of code above, but don't move them!
# When you Submit your code, we'll change these lines to
# assign different values to the variables.

# Imagine you are a professor and trying to determine whether
# you should curve the grades for an exam based on the class
# average. You are given the exam scores for your class of 10
# students above. Find the class average; if it is less than 70,
# then the exam should be curved.
#
# Once you have determined whether the exam should be curved,
# print the following string: "The exam should be curved: True."
# If the exam should not be curve, use 'False' instead of 'True',
# but either way, make sure to include the period after the
# result.

# Add your code here! With the initial values of the 10 variables
# above, your result should be True.
class_average = (s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10) / 10
if class_average < 70:
    print("The exam should be curved: True.")
else:
    print("The exam should be curved: False.")

amount = 67

# You may modify the lines of code above, but don't move them!
# When you Submit your code, we'll change these lines to
# assign different values to the variables.
#
# Write a program that will print out the coins needed to
# arrive at the amount shown above. Assume that we always want
# the maximum number of large coins: for example, for 67 cents,
# we want 2 quarters, 1 dime, 1 nickel, and 2 pennies instead
# of 6 dimes and 7 pennies.
#
# If you are unfamiliar with American currency: a quarter is
# worth 25 cents; a dime is worth 10 cents; a nickel is worth
# 5 cents; a penny is worth 1 cent.
#
# To make things easier, we've gone ahead and supplied your
# print statements. All you need to do is create four variables:
# quarters, dimes, nickels, and pennies.
#
# HINT: Change the value of amount as you go to reflect what
# coins you've already found.


# Add your code here!

# four varibales
quarters = 0
dimes = 0
nickels = 0
pennies = 0
# while amount is more than 0
while (amount > 0):
    # check if amount is more than quarter, increase quarter+1, subtract amount-25
    if amount >= 25:
        quarters += 1
        amount -= 25

    # else #check if amount is more than dime, increase dime+1, subtract amount-10
    elif amount >= 10:
        dimes += 1
        amount -= 10

    # else #check if amount is more than nickel, increase nickel+1, subtract amount-5
    elif amount >= 5:
        nickels += 1
        amount -= 5
    # else for pennies+1 and amount-1
    else:
        pennies += 1
        amount -= 1

# If your code above is correct, the following lines will
# initially print (for amount = 67):
# Quarters: 2
# Dimes: 1
# Nickels: 1
# Pennies: 2
print("Quarters:", quarters)
print("Dimes:", dimes)
print("Nickels:", nickels)
print("Pennies:", pennies)

meal_cost = 10.00
tax_rate = 0.08
tip_rate = 0.20

# You may modify the lines of code above, but don't move them!
# When you Submit your code, we'll change these lines to
# assign different values to the variables.

# When eating at a restaurant in the United States, it's
# customary to have two percentage-based surcharges added on
# top of your bill: sales tax and tip. These percentages are
# both applies to the original cost of the meal. For example,
# a 10.00 meal with 8% sales tax and 20% tip would add 0.80
# for tax (0.08 * 10.00) and 2.00 for tip (0.20 * 10.00).
#
# The variables above create the cost of a meal and identify
# what percentage should be charged for tax and tip.
#
# Add some code below that will print the "receipt" for a
# meal purchase. The receipt should look like this:
#
# Subtotal: 10.00
# Tax: 0.8
# Tip: 2.0
# Total: 12.8
#
# Subtotal is the original value of meal_cost, tax is the
# tax rate times the meal cost, tip is the tip rate times
# the meal cost, and total is the sum of all three numbers.
# Don't worry about the number of decimal places; it's fine
# if your code leaves off some numbers (like 0.8 for tax) or
# includes too many decimal places (like 2.121212121 for tip).


# Add your code here!
Subtotal = format(meal_cost, '.2f')
Tax = tax_rate * 10
Tip = tip_rate * 10
Total = Subtotal + Tax + Tip
print("Subtotal: ", Subtotal)
print("Tax: ", Tax)
print("Tip: ", Tip)
print("Total: ", Total)

start_hour = 3
start_minute = 48
length = 172

# You may modify the lines of code above, but don't move them!
# When you Submit your code, we'll change these lines to
# assign different values to the variables.

# Let's try something trickier! The variables above represent
# the start time for a run as well as the length of the run
# in minutes. The original values, for example, show a run
# that started at 3:48 and lasted 172 minutes.
#
# Add some code below that will print the time at which the
# run will end, using normal formatting (e.g. 6:40 for the
# original data above). To do this, you'll need to somehow
# find both the hours and minutes of the new time, convert
# both to strings, and add those to the colon ":" to print
# the time.
#
# You may assume that the length of the run will never cross
# 12:59 (e.g. you don't have to worry about going from
# 12:59 to 1:00 or 23:59 to 0:00). You also don't need to
# worry about the lack of 0 in front of single-digit minute
# counts (e.g. it's fine to show 5:07 as 5:7).


# Add your code here!
end_hour = start_hour

# complete the first uncomplete hour if possible
if length - (60 - start_minute) > 0:
    length = length - (60 - start_minute)
    end_hour += 1
else:
    length = length + start_minute

# update the hours and minumtes
end_hour += length // 60
end_minute = length % 60

end_time = str(end_hour) + ":" + str(end_minute)
print(end_time)

dosage = 100
time_since_last_dose = 7
is_nighttime = False
took_something_cross_reactive = False

# You may modify the lines of code above, but don't move them!
# When you Submit your code, we'll change these lines to
# assign different values to the variables.
#
# Let's try to use our mathematical operators and logical
# operators together.
#
# Imagine you've been battling a cold. You're deciding whether
# to take cough syrup or not, and if so, how much to take.
#
# time_since_last_dose represents the number of hours since
# you last took some cough syrup. For every hour it's been,
# you're allowed to have one dose.
#
# If it's nighttime (is_nighttime), then you may double
# your dose since you won't be taking any until morning.
#
# However, if you've taken something cross-reactive
# (took_something_cross_reactive), then you should not take
# any cough syrup.
#
# Write a program that will print how large a dose of cough
# syrup to take.
#
# HINT: Remember, if you try to multiply a number times a
# boolean, Python treats False as 0 and True as 1. There are
# other ways to do this, though.


# Add your code here!
dose_day = 1

dose_night = 2

# if took some thing wrong then print message not to take syrup


if (took_something_cross_reactive == True):

    print("0")



else:

    if (is_nighttime == False):

        dosage_amount = time_since_last_dose * dose_day * dosage



    else:

        dosage_amount = time_since_last_dose * dose_night * dosage  # else take 2 dose for every hour

    print(dosage_amount)
